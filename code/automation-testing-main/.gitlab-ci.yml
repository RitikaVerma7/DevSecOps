###############################################################
# 🚀 SCU Food Delivery Application CI/CD Pipeline
# Author: RV
# Last Updated: March 2025
# Handles: Frontend Validation, Backend Functional Testing,
#          Running Backend Container, Security Testing, Docker Build & Deployment
##############################################################

stages:
  - validate        # Code quality checks (Frontend)
  - test            # Backend functional testing
  - backend-run     # Running the backend container
  - security_test   # Security testing (SQLi, XSS)
  - build           # Building Docker images
  - deploy          # Deployment to environments

####################################
# ✅ FRONTEND VALIDATION STAGE
####################################
frontend-validation:
  image: node:latest
  stage: validate
  before_script:
    - npm install -g htmlhint csslint
  script:
    - htmlhint index.html login.html || echo "⚠ HTMLHint warnings, ignoring errors."
  artifacts:
    paths:
      - lint_results.txt
    when: always
  after_script:
    - echo "Linting completed at $(date)" > lint_results.txt
  allow_failure: true
  only:
    - main

####################################
# ✅ BACKEND FUNCTIONAL TESTING STAGE
####################################
backend-functional-testing:
  image: python:3.9
  stage: test
  services:
    - name: mysql:5.7
      alias: mysql
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: scu_food_delivery
    MYSQL_USER: scu_food
    MYSQL_PASSWORD: Odie@2014
    MYSQL_HOST: mysql
  before_script:
    - echo "🔧 Installing dependencies..."
    - apt-get update && apt-get install -y default-mysql-client curl
    - pip install --upgrade pip
    - pip install flask==3.0.1 mysql-connector-python pytest requests
    - echo "⏳ Waiting for MySQL to start..."
    - sleep 15
    - echo "🛠 Executing database schema..."
    - mysql -h mysql -uroot -proot -e "source Backend/backend.sql"
    - echo "📝 Verifying MySQL tables..."
    - mysql -h mysql -uroot -proot -e "USE scu_food_delivery; SHOW TABLES;" || exit 1
    - echo "🚀 Starting backend server..."
    - python Backend/app.py &  # Start Flask app in background (Flask binds to 0.0.0.0 in app.py)
    - sleep 10
    - curl -I http://127.0.0.1:5000 || exit 1
  script:
    - cd Backend
    - export PYTHONPATH=$(pwd)
    - pytest tests/test_app.py tests/test_login.py tests/test_order.py --disable-warnings || echo "⚠ QA Tests failed, but continuing."
  artifacts:
    paths:
      - Backend/qa_test_results.log
    when: always
  after_script:
    - echo "QA Testing completed at $(date)" > qa_test_results.log
  allow_failure: true
  only:
    - main

####################################
# ✅ RUN BACKEND CONTAINER STAGE
####################################
backend-run:
  image: docker:stable
  stage: backend-run
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "🔧 Installing dependencies..."
    - apk add --no-cache python3 py3-pip curl rust cargo
    - python3 --version
    - pip3 --version
    - cargo --version
    - echo "📌 Ensuring requirements.txt exists..."
    - |
      if [ ! -f Backend/requirements.txt ]; then
        echo -e "Flask==3.0.1\nmysql-connector-python\npytest\nrequests" > Backend/requirements.txt;
      fi
    - echo "📌 Ensuring Dockerfile exists..."
    - |
      if [ ! -f Backend/Dockerfile ]; then
        echo -e "FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"app.py\"]" > Backend/Dockerfile;
      fi
  script: >
    echo "🚀 Building backend Docker image..." &&
    docker build -t scu-food-delivery-backend Backend/ &&
    echo "🚀 Running backend container..." &&
    docker run -d --name scu-food-delivery -p 5000:5000 scu-food-delivery-backend &&
    echo "Waiting for Flask to start..." &&
    for i in {1..20}; do
      if curl -I http://127.0.0.1:5000; then
        echo "Flask is running.";
        exit 0;
      else
        echo "Waiting for Flask... ($i)";
        sleep 2;
      fi;
    done || (echo "Flask did not start correctly"; docker logs scu-food-delivery; exit 1)
  allow_failure: false


####################################
# ✅ SECURITY TESTING STAGE
####################################
backend-security-testing:
  image: ubuntu:20.04
  stage: security_test
  services:
    - docker:dind
    - name: mysql:5.7
      alias: mysql
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: scu_food_delivery
    MYSQL_USER: scu_food
    MYSQL_PASSWORD: Odie@2014
  before_script:
    - apt-get update && apt-get install -y docker.io curl jq nmap python3 python3-pip git
    - echo "Waiting for MySQL service to start..." && sleep 15
    # Create requirements.txt if missing
    - if [ ! -f Backend/requirements.txt ]; then echo -e "Flask==3.0.1\nmysql-connector-python\npytest\nrequests" > Backend/requirements.txt; fi
    - cat Backend/requirements.txt
    # Create Dockerfile if missing
    - if [ ! -f Backend/Dockerfile ]; then echo -e "FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"app.py\"]" > Backend/Dockerfile; fi
    - cat Backend/Dockerfile
  script: |
    echo "Building backend Docker image for security testing..."
    docker build -t scu-food-delivery-backend -f Backend/Dockerfile Backend/
    
    echo "Running backend container for security testing..."
    docker run -d --name scu-food-deploy-sec -p 5000:5000 \
      --env MYSQL_HOST=mysql \
      --env MYSQL_USER=scu_food \
      --env MYSQL_PASSWORD=Odie@2014 \
      --env MYSQL_DB=scu_food_delivery \
      scu-food-delivery-backend
    
    echo "Waiting for Flask to start..."
    sleep 10
    
    echo "Fetching container IP for security testing..."
    CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' scu-food-deploy-sec)
    echo "Container IP: $CONTAINER_IP"
    
    echo "Running local nmap scan for port 80 on container IP..."
    nmap -p 80 $CONTAINER_IP
    
    echo "Security testing stage completed."
  artifacts:
    paths:
      - Backend/security_test_results.log
    when: always
  after_script:
    - docker logs scu-food-deploy-sec || echo "Container scu-food-deploy-sec not found"
    - echo "Security Testing completed at $(date)" > Backend/security_test_results.log

####################################
# ✅ BUILD DOCKER IMAGE STAGE
####################################
backend-docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script: |
    echo "Ensuring Backend/requirements.txt exists..."
    if [ ! -f Backend/requirements.txt ]; then
      echo -e "Flask==3.0.1\nmysql-connector-python\npytest\nrequests" > Backend/requirements.txt;
    fi
    cat Backend/requirements.txt
    
    echo "Generating Dockerfile on the fly in Backend folder..."
    cat <<'EOF' > Backend/Dockerfile
    FROM python:3.9
    WORKDIR /app
    COPY . .
    RUN pip install --no-cache-dir -r requirements.txt
    CMD ["python", "app.py"]
    EOF
    cat Backend/Dockerfile

    echo "Building Docker image from Backend folder..."
    docker build -t scu-food-delivery-backend -f Backend/Dockerfile Backend/
  artifacts:
    paths:
      - build.log
    when: always
  after_script:
    - echo "Build completed at $(date)" > build.log
  allow_failure: true
  only:
    - main


####################################
# ✅ DEPLOYMENT STAGE
####################################
backend-docker-deployment:
  image: docker:latest
  stage: deploy
  script:
    - echo "Stopping any existing container..."
    - docker stop scu-food-delivery || true
    - docker rm scu-food-delivery || true
    - echo "Starting new container..."
    - docker run -d --name scu-food-delivery -p 5000:5000 scu-food-delivery-backend || echo "❌ Deployment failed, but continuing."
  artifacts:
    paths:
      - deployment_logs.txt
    when: always
  after_script:
    - echo "✅ Deployment completed at $(date)" > deployment_logs.txt
  allow_failure: true
  only:
    - main
